<?php

declare(strict_types=1);

use app\migrations\{Migration_0, Migration_1, Migration_2};

function getMigrations(): array
{
    return [new Migration_0(), new Migration_1(), new Migration_2()];
}<?php

declare(strict_types=1);

namespace app\migrations;

class Migration_0 extends \app\core\Migration
{

    public function getVersion(): int
    {
        return 0;
    }

    function up(): void
    {
        $this->database->pdo->query("CREATE TABLE IF NOT EXISTS users
        (
            id serial primary key ,
            first_name character varying(100)  NOT NULL,
            second_name character varying(100)  NOT NULL,
            age integer,
            job text,
            email text
        );");

        parent::up();
    }
}<?php

declare(strict_types=1);

namespace app\migrations;

class Migration_1 extends \app\core\Migration
{

    public function getVersion(): int
    {
        return 1;
    }

    public function up(): void
    {
        $this->database->pdo->query("ALTER TABLE users ADD COLUMN phone varchar(15)");

        parent::up();
    }

    public function down(): void
    {
        $this->database->pdo->query("ALTER TABLE users DROP COLUMN phone");
    }
}<?php

declare(strict_types=1);

namespace app\migrations;

class Migration_2 extends \app\core\Migration
{

    public function getVersion(): int
    {
        return 2;
    }

    function up(): void
    {
        $this->database->pdo->query("ALTER TABLE users ALTER COLUMN phone  TYPE varchar(50)");

        parent::up();
    }
}<?php

declare(strict_types=1);

use app\core\ConfigParser;
use app\core\Database;

const PROJECT_ROOT = __DIR__ . "/../";

chdir(PROJECT_ROOT);

require PROJECT_ROOT . "vendor/autoload.php";

include 'migrations\AllMigrations.php';
$migrations = getMigrations();
echo sprintf("%s migrations found%s", count($migrations), PHP_EOL);

ConfigParser::load();

$database = new Database(getenv("DB_DSN"), getenv("DB_USER"), getenv("DB_PASSWORD"));

$database->pdo->query("CREATE TABLE if not exists migrations (version int);");
$database->pdo->query("INSERT INTO migrations (version) values (-1);");

$maxver = $database->pdo->query("SELECT max(version) FROM migrations")->fetch(PDO::FETCH_NUM)[0];
echo sprintf("Current migration: %s%s", $maxver, PHP_EOL);

foreach ($migrations as $migration) {
    /** @var \app\core\Migration $migration */

    if ($migration->getVersion() <= $maxver) continue;
    $migration->setDatabase($database);
    echo sprintf("Applying migration %s%s", $migration->getVersion(), PHP_EOL);
    $migration->up();

}

<?php

declare(strict_types=1);

namespace app\models;

use app\core\Model;

class User extends Model
{

 //["id", "first_name", "second_name", "email", "job", "age"];

    private string $first_name;

    /**
     * @return string
     */
    public function getFirstName(): string
    {
        return $this->first_name;
    }

    /**
     * @param string $first_name
     */
    public function setFirstName(string $first_name): void
    {
        $this->first_name = $first_name;
    }

    /**
     * @return string
     */
    public function getSecondName(): string
    {
        return $this->second_name;
    }

    /**
     * @param string $second_name
     */
    public function setSecondName(string $second_name): void
    {
        $this->second_name = $second_name;
    }

    /**
     * @return string
     */
    public function getEmail(): string
    {
        return $this->email;
    }

    /**
     * @param string $email
     */
    public function setEmail(string $email): void
    {
        $this->email = $email;
    }

    /**
     * @return string
     */
    public function getJob(): string
    {
        return $this->job;
    }

    /**
     * @param string $job
     */
    public function setJob(string $job): void
    {
        $this->job = $job;
    }

    /**
     * @return int
     */
    public function getAge(): int
    {
        return $this->age;
    }

    /**
     * @param int $age
     */
    public function setAge(int $age): void
    {
        $this->age = $age;
    }

    private  string $second_name;

    private string $email;

    private string $job;

    private  int $age;

    /**
     * @param string $first_name
     * @param string $second_name
     * @param string $email
     * @param string $job
     * @param int $age
     */
    public function __construct(?int $id, string $first_name, string $second_name, string $email, string $job, int $age)
    {
        parent::__construct($id);
        $this->first_name = $first_name;
        $this->second_name = $second_name;
        $this->email = $email;
        $this->job = $job;
        $this->age = $age;
    }


}<?php

declare(strict_types=1);

namespace app\core;

enum MethodEnum: string
{
    case GET = "GET";
    case POST = "POST";
    case PUT = "PUT";
    case DELETE = "DELETE";
}
<?php

declare(strict_types=1);

namespace app\core;

enum HttpStatusCodeEnum: int
{
    case HTTP_OK = 200;

    case HTTP_NOT_FOUND = 404;

    case HTTP_SERVER_ERROR = 500;
}
<?php

declare(strict_types=1);

namespace app\core;

abstract class Model
{
    private ?int $id;

    public function __construct(?int $id)
    {
        if (!is_null($id)) {
            $this->setId($id);
        }
    }

    /**
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * @param int|null $id
     */
    public function setId(?int $id): void
    {
        $this->id = $id;
    }
}<?php

declare(strict_types=1);

namespace app\core;

class ConfigParser
{
    public static function load()
    {
        $filename = PROJECT_ROOT . ".env";
        if (!file_exists($filename)) return;
        $lines = file($filename);
        foreach ($lines as $line) {
            $dataline = trim(explode("#", $line)[0]);
            if (strlen($dataline)===0) continue;
            $params = explode("=", $dataline, 2);
            if (count($params)!==2) continue;
            $key = rtrim($params[0]);
            $value = ltrim($params[1]);
            $_ENV[$key] = $value;
            $_SERVER[$key] = $value;
            putenv("$key=$value");

        }
    }
}<?php

declare(strict_types=1);

namespace app\core;

class Request
{
    public function getUri(): string
    {
        return $_SERVER["REQUEST_URI"];
    }

    public function getMethod(): MethodEnum
    {
        return MethodEnum::from($_SERVER["REQUEST_METHOD"]);
    }

    public function getBody(): array
    {
        $body = [];
        switch ($this->getMethod()) {
            case MethodEnum::GET:
            case MethodEnum::DELETE:
                foreach ($_GET as $key => $value) {
                    $body[$key] = filter_input(INPUT_GET, $key, FILTER_SANITIZE_SPECIAL_CHARS);
                }
                break;
            case MethodEnum::POST:
            case MethodEnum::PUT:
                foreach ($_POST as $key => $value) {
                    $body[$key] = filter_input(INPUT_POST, $key, FILTER_SANITIZE_SPECIAL_CHARS);
                }
                break;
        }
        return $body;
    }


    //почитал, что &_POST не парсит jsonки так что отдельни метод напистаь нада
    public function getJsonBody(): array
    {
        $input = file_get_contents('php://input');
        $data = json_decode($input, true);

        return is_array($data) ? $data : [];
    }
}
<?php

declare(strict_types=1);

namespace app\core;

class Collection
{
    private array $rows;

    private int $count;

    private array $objects = [];
    private Mapper $mapper;

    public function __construct(array $rows, Mapper $mapper)
    {
        $this->rows = $rows;
        $this->count = count($rows);
        $this->mapper = $mapper;
    }

    public function getNextRow()
    {
        for ($i = 0; $i < $this->count; $i++) {
            yield $this->getRow($i);
        }

    }

    private function getRow(int $i)
    {
        if ($i>= $this->count) {
            return null;
        }

        if (!array_key_exists($i, $this->objects)) {
            $this->objects[$i] = $this->mapper->createObject($this->rows[$i]);
        }

        return $this->objects[$i];

    }
}<?php

declare(strict_types=1);

namespace app\core;

class Application
{
    public static Application $app;
    private Request $request;
    private Response $response;
    private Router $router;
    private Logger $logger;
    private Database $database;

    public function __construct()
    {
        self::$app = $this;
        $this->logger = new Logger(sprintf("%s%s/%s",PROJECT_ROOT, $_ENV["APP_LOG_PATH"], $_ENV["APP_LOG"]));
        $this->request = new Request();
        $this->response = new Response();
        $this->router = new Router($this->request, $this->response);
        $this->database = new Database(getenv("DB_DSN"), getenv("DB_USER"), getenv("DB_PASSWORD"));

    }

    public function run()
    {

        try {
            $this->router->resolve();
        } catch (\Exception $exception) {
            $this->getLogger()->error("Cannot resolve route: $exception");
            $this->response->setStatusCode(HttpStatusCodeEnum::HTTP_SERVER_ERROR);
        }
    }

    public function getRequest(): Request
    {
        return $this->request;
    }

    public function getRouter(): Router
    {
        return $this->router;
    }

        /**
     * @return Logger
     */
    public function getLogger(): Logger
    {
        return $this->logger;
    }

    /**
     * @return Database
     */
    public function getDatabase(): Database
    {
        return $this->database;
    }
}<?php

declare(strict_types=1);

namespace app\core;

class Response
{
   public function setStatusCode(HttpStatusCodeEnum $status)
   {
       \http_response_code($status->value);
   }
}<?php

declare(strict_types=1);

namespace app\core;

use PDO;
class Database
{
  public PDO $pdo;
  public function __construct(string $dsn, string $user, string $password)
  {
      $this->pdo = new PDO($dsn, $user, $password);
      $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  }
}<?php

declare(strict_types=1);

namespace app\core;



abstract class Mapper
{
    private \PDO $pdo;

    public function __construct()
    {
        $this->pdo = Application::$app->getDatabase()->pdo;
    }

    public function Insert(Model $model) {
        $this->doInsert($model);
    }

    public function Update(Model $model) {
        $this->doUpdate($model);
    }

    public function Delete(Model $model) {
        $this->doDelete($model);
    }

    public function Select(int $id): Model {
        return $this->createObject($this->doSelect($id));
    }

    public function SelectAll(): Collection {
        return new Collection($this->doSelectAll(), $this->getInstance());
    }

    protected abstract function doInsert(Model $model): Model;

    protected abstract function doUpdate(Model $model);

    protected abstract function doDelete(Model $model);

    protected abstract function doSelect(int $id): array;

    protected abstract function doSelectAll(): array;

    public abstract function getInstance(): Mapper;

    public abstract function createObject(array $data): Model;

    /**
     * @return \PDO
     */
    public function getPdo(): \PDO
    {
        return $this->pdo;
    }

}<?php

declare(strict_types=1);

namespace app\core;

abstract class Migration
{

    protected Database $database;
    public abstract function getVersion(): int;

    public function up(): void
    {
        $this->database->pdo->query("DELETE FROM migrations;");
        $this->database->pdo->query("INSERT INTO migrations (version) values ({$this->getVersion()});");
    }

    public function down():void {}

    /**
     * @param Database $database
     */
    public function setDatabase(Database $database): void
    {
        $this->database = $database;
    }


}<?php
declare(strict_types=1);

namespace app\core;

use Exception;

class JsonConfigLoader
{
    private string $filePath;

    public function __construct(string $filePath)
    {
        $this->filePath = $filePath;
    }

    public function load(): void
    {
        if (!file_exists($this->filePath)) {
            throw new Exception("JSON config file not found: {$this->filePath}");
        }

        $content = file_get_contents($this->filePath);
        $data = json_decode($content, true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception("Invalid JSON in config: " . json_last_error_msg());
        }

        if (isset($data['logs']['path'])) {
            $logPath = rtrim($data['logs']['path'], "/") . "/";
            putenv("APP_LOG_PATH=$logPath");
            $_ENV["APP_LOG_PATH"] = $logPath;
        } else {
            throw new Exception("Missing 'logs.path' in config");
        }

        if (isset($data['jwt'])) {
            $jwt = $data['jwt'];

            putenv("JWT_SECRET={$jwt['secret']}");
            $_ENV["JWT_SECRET"] = $jwt['secret'];

            putenv("JWT_ALGORITHM={$jwt['algorithm']}");
            $_ENV["JWT_ALGORITHM"] = $jwt['algorithm'];

            putenv("JWT_TOKEN_TTL={$jwt['token_ttl']}");
            $_ENV["JWT_TOKEN_TTL"] = $jwt['token_ttl'];

            putenv("JWT_REFRESH_TOKEN_TTL={$jwt['refresh_token_ttl']}");
            $_ENV["JWT_REFRESH_TOKEN_TTL"] = $jwt['refresh_token_ttl'];
        }

    }

    
}<?php

declare(strict_types=1);

namespace app\core;

use app\exceptions\FileException;
use Psr\Log\AbstractLogger;

class Logger extends AbstractLogger
{

    

    private string $filename;

    public function __construct(string $filename)
    {
        $this->filename = $filename;

        $dir = dirname($filename);
        if (!file_exists($dir))
        {
           $success =  mkdir($dir, 0777, true);
           if (!$success) throw new FileException("Cannot create log dir");
        }
    }

    public function log($level, $message, array $context = array()): void
    {
        file_put_contents($this->filename, sprintf("%s\t[$level] $message", date("H-m-s")));
    }


}<?php

declare(strict_types=1);

namespace app\core;

use app\exceptions\RouteException;

class Router
{
    private Request $request;

    private Response $response;

    private array $routes = [];


    public function __construct(Request $request, Response $response)
    {
        $this->request = $request;
        $this->response = $response;
    }

    public function setGetRoute(string $path, string|array $callback): void
    {
        $this->routes[MethodEnum::GET->value][$path] = $callback;
    }

    public function setPostRoute(string $path, string|array $callback): void
    {
        $this->routes[MethodEnum::POST->value][$path] = $callback;
    }

    public function resolve(): void
    {
        $path = parse_url($this->request->getUri(), PHP_URL_PATH);        $method = $this->request->getMethod();
        if ($method === MethodEnum::GET && preg_match("/(png|jpe?g|css|js)/", $path)) {
            $this->renderStatic(ltrim($path, "/"));
            return;
        }

        if (!isset($this->routes[$method->value]) || !isset($this->routes[$method->value][$path])) {
            $this->renderStatic("404.html");
            $this->response->setStatusCode(HttpStatusCodeEnum::HTTP_NOT_FOUND);
            return;
        }

        $callback = $this->routes[$method->value][$path];

        if (is_string($callback)) {
            if (empty($callback)) {
                throw new RouteException("empty callback");
            }
            $this->renderView($callback);
        }

        if (is_array($callback)) {
            call_user_func($callback, $this->request);
        }
    }

    public function renderView(string $name): void
    {
        include PROJECT_ROOT . "views/$name.php";
    }

    public function renderStatic(string $name): void
    {
        include PROJECT_ROOT . "web/$name";
    }
}
<?php

namespace app\controllers\api;

use app\core\Application;
use app\utilits\JsonRenderable;

class ApiController
{

    use JsonRenderable;

    public function hello(): void
    {
        $this->renderJson(['message' => 'привет json!']);
    }

    public function helloUser(): void
    {
        $body = Application::$app->getRequest()->getJsonBody();

        $username = $body['username'] ?? 'гость';

        $this->renderJson(['message' => 'Привет, ' . $username . '!']);
    }
}
<?php

declare(strict_types=1);

namespace app\controllers;

use app\core\Application;
use app\core\Logger;
use app\exceptions\FileException;
use app\mappers\UserMapper;
use app\models\User;

class PresentationController
{
  public function getView() {
      Application::$app->getRouter()->renderView("presentation");
  }

  public function handleView() {
      $body = Application::$app->getRequest()->getBody();
      try {
         $mapper = new UserMapper();
         $user = $mapper->createObject($body);
         $mapper->Insert($user);
         $users = $mapper->SelectAll();
         var_dump($users);
      } catch (\PDOException $exception)
      {
          Application::$app->getLogger()->error($exception);

      }

  }
}<?php

declare(strict_types=1);

namespace app\mappers;

use app\core\Mapper;
use app\core\Model;
use app\models\User;

class UserMapper extends \app\core\Mapper
{


    private ?\PDOStatement $insert;
    private ?\PDOStatement $update;
    private ?\PDOStatement $delete;
    private ?\PDOStatement $select;
    private ?\PDOStatement $selectAll;

    //"id", "first_name", "second_name", "email", "job", "age"];
    public function __construct()
    {
        parent::__construct();

        $this->insert = $this->getPdo()->prepare("
            INSERT INTO users (first_name, second_name, email, job, age) VALUES (:first_name, :second_name, :email, :job, :age)
        ");

        $this->update = $this->getPdo()->prepare("
            UPDATE users 
                SET first_name = :first_name,
                    second_name = :second_name,
                    email = :email,
                    job = :job,
                    age = :age  
                WHERE id = :id
                    
            ");

        $this->delete = $this->getPdo()->prepare("DELETE FROM users WHERE id = :id");

        $this->select = $this->getPdo()->prepare("SELECT * FROM users WHERE id = :id");

        $this->select = $this->getPdo()->prepare("SELECT * FROM users");

    }

    /**
     * @param User $model
     * @return Model
     */
    protected function doInsert(Model $model): Model
    {

       $this->update->execute([
           //(first_name, second_name, email, job, age)
           ":first_name" => $model->getFirstName(),
           ":second_name" => $model->getSecondName(),
           ":email" => $model->getEmail(),
           ":job" =>$model->getJob(),
           ":age" =>$model->getAge()
       ]);

       $id = $this->getPdo()->lastInsertId();
       $model->setId((int)$id);
       return $model;
    }

    /**
     * @param User $model
     * @return void
     */
    protected function doUpdate(Model $model)
    {
        $this->update->execute([
            ":id" => $model->getId(),
            ":first_name" => $model->getFirstName(),
           ":second_name" => $model->getSecondName(),
           ":email" => $model->getEmail(),
           ":job" =>$model->getJob(),
           ":age" =>$model->getAge()]);
    }

    protected function doDelete(Model $model)
    {
       $this->delete->execute([":id"=>$model->getId()]);
    }

    protected function doSelect(int $id): array
    {
        $this->select->execute([":id"=>$id]);
       return $this->select->fetch(\PDO::FETCH_NAMED);
    }

    protected function doSelectAll(): array
    {
        $this->selectAll->execute();
        return $this->selectAll->fetchAll(\PDO::FETCH_NAMED);
    }

    public function getInstance(): Mapper
    {
       return $this;
    }

    public function createObject(array $data): Model
    {
       return new User(
           id: (array_key_exists("id", $data) ? $data["data"] : null),
           first_name: $data["first_name"],
           second_name: $data["second_name"],
           email: $data["email"],
           job: $data["job"],
           age: $data["age"]
       );
    }
}<?php

declare(strict_types=1);

use app\controllers\PresentationController;
use app\core\Application;
use app\core\ConfigParser;
use app\controllers\api\ApiController;
use app\core\JsonConfigLoader;

const PROJECT_ROOT = __DIR__ . "/../";

require PROJECT_ROOT . "vendor/autoload.php";

ConfigParser::load();
if ($_ENV["APP_ENV"] === "dev") {
    error_reporting(E_ALL);
    ini_set("display_errors", "1");
    ini_set("log_errors", "1");
    ini_set("error_log", sprintf("%sruntime/%s", PROJECT_ROOT, $_ENV["PHP_LOG"]));
}


$jsonConfigPath = "config/app.json";
$jsonLoader = new JsonConfigLoader($jsonConfigPath);
$jsonLoader->load();






$application = new Application();

$router = $application->getRouter();

$router->setGetRoute("/", [new PresentationController(), "getView"]);
$router->setPostRoute("/handle", [new PresentationController(), "handleView"]);
$router->setGetRoute("/api/helloApi", [new ApiController(), "hello"]);
$router->setPostRoute("/api/helloApi", [new ApiController(), "helloUser"]);
$router->setGetRoute("/error", "");

ob_start();
$application->run();
ob_flush();
<?php

declare(strict_types=1);

namespace app\exceptions;

class RouteException extends \Exception
{

}<?php

declare(strict_types=1);

namespace app\exceptions;

class FileException extends \Exception
{
   private string $filename;

   public function __construct(string $message = "", int $code = 0, ?\Throwable $previous = null, string $filename="")
   {
       parent::__construct($message, $code, $previous);
       $this->filename = $filename;
   }

    /**
     * @return string
     */
    public function getFilename(): string
    {
        return $this->filename;
    }
}<html lang="ru">
<head>
    <title>Форма</title>
    <meta charset="UTF-8">
</head>
<body>
<h2>Регистрация</h2>
<form action="/handle" method="post">
    <dl>
        <dt><label for="first_name">Имя</label></dt>
        <dd><input type="text" name="first_name" id="first_name"></dd>

        <dt><label for="second_name">Фамилия</label></dt>
        <dd><input type="text" name="second_name" id="second_name"></dd>

        <dt><label for="age">Возраст</label></dt>
        <dd><input type="text" name="age" id="age"></dd>

        <dt><label for="email">E-Mail</label></dt>
        <dd><input type="text" name="email" id="email"></dd>


        <dt><label for="job">РАБота</label></dt>
        <dd><input type="text" name="job" id="job"></dd>

        <dt></dt>
        <dd><input type="submit" value="submit"></dd>


    </dl>


</form>
</body>
</html><html lang="ru">
<head>
    <title>Success</title>
    <meta charset="UTF-8">
</head>
<body>
<h1>Success!</h1>
<a href="/">На главную</a>
</body>
</html><?php

namespace app\utilits;

trait JsonRenderable
{
    public function renderJson(array $data): void
    {
        header('Content-Type: application/json');
        echo json_encode($data);
    }
}
